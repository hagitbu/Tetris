{"version":3,"sources":["components/styledComponents/StyledCell.js","tetrominos.js","media/bgDark.jpg","media/bgLight.jpg","contexts/ThemeContext.js","components/Cell.js","components/styledComponents/StyledBoard.js","components/Board.js","components/GameButton.js","components/styledComponents/StyledGameStatus.js","components/GameStatus.js","components/styledComponents/StyledTetris.js","gameEssentials.js","hooks/useBoard.js","hooks/useTetro.js","components/Tetris.js","hooks/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["StyledCell","styled","div","props","color","type","Tetrominos","0","shape","colorDark","colorLight","O","I","T","L","J","S","Z","ThemeContext","createContext","ThemeContextProvider","useState","isLightTheme","setIsLightTheme","statusFont","statusBg","boardBorder","boardBg","bgImage","bgImageLight","newGameBg","light","bgImageDark","dark","Provider","value","toggleTheme","children","Cell","context","useContext","React","memo","StyledBoard","height","width","Board","board","theme","length","map","row","cell","index","StyledNewGameButton","button","GameButton","onClickFunc","text","style","onClick","StyledGameStatus","GameStatus","StyledTetris","boardWidth","createBoard","fillingArr","Array","fill","filledArr","outOfBounds","currTetro","dirX","dirY","y","tetromino","x","position","boardHeight","useBoard","newTetroOnBoard","setBoard","clearedRowsCount","setClearedRowsCount","gameOver","setGameOver","dropSpeed","setDropSpeed","level","setLevel","score","setScore","updateScore","totalRowscleared","prev","setLevelAndSpeed","rows","updateBoard","prevBoard","updatedBoard","indexRow","indexCol","unifiedWithBoard","i","tetroCounter","j","clearFullRows","useEffect","useTetro","setCurrTetro","prevTetro","tetro","tetroString","randomTetromino","charAt","Math","floor","random","getRandomTetromino","tetroToRotate","slice","rotatedTetro","Tetris","updatePosition","rotateTetro","moveDown","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","preventDefault","keyCode","moveTetromino","onKeyUp","marginTop","textAlign","textShadow","margin","top","left","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.571a157f.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  box-sizing: border-box;\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`\r\n","export const Tetrominos = {\r\n    0 : {\r\n        shape: [[0, 0],\r\n                [0, 0]],\r\n        colorDark: '0, 0, 0',\r\n        colorLight: '250, 250, 250'\r\n    },\r\n\r\n    O : {\r\n        shape: [['O', 'O'],\r\n                ['O', 'O']],\r\n        colorDark: '255, 255, 0', \r\n        colorLight: '253, 230, 176'\r\n\r\n    },\r\n\r\n    I : {\r\n        shape: [['I', 'I', 'I', 'I'],\r\n                [0, 0, 0, 0],\r\n                [0, 0, 0, 0],\r\n                [0, 0, 0, 0]],\r\n        colorDark: '0, 255, 255',\r\n        colorLight: '186, 229, 229'\r\n    },\r\n\r\n    T : {\r\n        shape: [['T', 'T', 'T'],\r\n                [0, 'T', 0],\r\n                [0, 0, 0]],\r\n        colorDark: '128, 0, 128',\r\n        colorLight: '243, 209, 244'\r\n    },\r\n\r\n    L : {\r\n        shape: [['L', 0, 0],\r\n                ['L', 0, 0],\r\n                ['L', 'L', 0]],\r\n        colorDark: '255, 127, 0',\r\n        colorLight: '251, 198, 135'\r\n    },\r\n\r\n    J : {\r\n        shape: [[0, 0, 'J'],\r\n                [0, 0, 'J'],\r\n                [0, 'J', 'J']],\r\n        colorDark: '0, 0, 255',\r\n        colorLight: '152, 214, 234'\r\n    },\r\n\r\n    S : {\r\n        shape: [[0, 'S', 'S'],\r\n                ['S', 'S', 0],\r\n                [0, 0, 0]],\r\n        colorDark: '0, 255, 0',\r\n        colorLight: '213, 236, 194'\r\n    },\r\n\r\n    Z : {\r\n        shape: [['Z', 'Z', 0],\r\n                [0, 'Z', 'Z'],\r\n                [0, 0, 0]],\r\n        colorDark: '255, 0, 0',\r\n        colorLight: '234, 144, 122'\r\n    }\r\n\r\n}\r\n\r\nexport const getRandomTetromino = () => {\r\n    const tetroString = 'OITLJSZ';\r\n    const randomTetromino = tetroString.charAt(Math.floor(Math.random() * tetroString.length))\r\n    return (Tetrominos[randomTetromino]);\r\n\r\n}\r\n","export default __webpack_public_path__ + \"static/media/bgDark.4c44b728.jpg\";","export default __webpack_public_path__ + \"static/media/bgLight.218b5dda.jpg\";","import React, { useState, createContext } from 'react'\r\nimport bgImageDark from '../media/bgDark.jpg';\r\nimport bgImageLight from '../media/bgLight.jpg';\r\n\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport default function ThemeContextProvider(props) {\r\n\r\n    const [isLightTheme, setIsLightTheme] = useState(false);\r\n    \r\n    const [light] = useState(\r\n        {\r\n            statusFont: '#555',\r\n            statusBg: '#e9e9e9',\r\n            boardBorder: '#79b2c1',\r\n            boardBg: '#a5a5a5',\r\n            bgImage: bgImageLight,\r\n            newGameBg: '#1dbd98'\r\n        }\r\n    );\r\n    const [dark] = useState(\r\n        {\r\n            statusFont: 'lightGray',\r\n            statusBg: 'black',\r\n            boardBorder: '#888',\r\n            boardBg: '#333',\r\n            bgImage: bgImageDark,\r\n            newGameBg: '#8a0049'\r\n        }\r\n    );\r\n\r\n    const toggleTheme = () => {\r\n        setIsLightTheme(!isLightTheme);\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ isLightTheme, light, dark, toggleTheme }}>\r\n            {props.children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { StyledCell } from './styledComponents/StyledCell';\r\nimport { Tetrominos } from '../tetrominos';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\n\r\n\r\nconst Cell = ({ type }) => {\r\n\r\n    const context = useContext(ThemeContext);\r\n    const { isLightTheme, light, dark, toggleTheme } = context;\r\n    const theme = isLightTheme ? light : dark;\r\n\r\n    return (\r\n        <StyledCell type={type} color={isLightTheme ? Tetrominos[`${type}`].colorLight : Tetrominos[`${type}`].colorDark}></StyledCell>\r\n    )\r\n}\r\n\r\nexport default React.memo(Cell);\r\n\r\n","import styled from 'styled-components'\r\n\r\n\r\nexport const StyledBoard = styled.div`\r\n    margin: 50px auto;\r\n    display: grid;\r\n    grid-template-rows: repeat(${props => props.height}, calc(20vw / ${props => props.width}));\r\n    //repeat (how many times to repeat, the size of each one)\r\n    //calc- we want each cell to have the same width and height, because width is 1 fr we make the calc so the height would be the same as the width\r\n    \r\n    grid-template-columns: repeat(${props => props.width}, 1fr );\r\n    max-width: 20vw;\r\n    min-width: 150px;\r\n    background: ${props => props.boardBg};\r\n    grid-gap: 1px;\r\n    border: 4px solid ${props => props.boardBorder};\r\n`\r\n\r\n","import React, { useContext } from 'react';\r\nimport Cell from './Cell';\r\nimport { StyledBoard } from './styledComponents/StyledBoard';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\n\r\nconst Board = ({ board }) => {\r\n    const context = useContext(ThemeContext);\r\n    const { isLightTheme, light, dark } = context;\r\n    const theme = isLightTheme ? light : dark;\r\n\r\n    return (\r\n        <StyledBoard\r\n            boardBorder={theme.boardBorder}\r\n            boardBg={theme.boardBg}\r\n            width={board[0].length}\r\n            height={board.length}>\r\n            {board.map(row => row.map((cell, index) => <Cell key={index} type={cell[0]} />))}\r\n        </StyledBoard>\r\n    )\r\n\r\n}\r\n\r\nexport default Board;","import React, { useContext } from 'react'\r\nimport styled from 'styled-components';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\n\r\nconst StyledNewGameButton = styled.button`\r\n    color: white;\r\n    font-size: larger;\r\n    border: 1px solid white;\r\n    border-radius: 10px;\r\n    padding: 15px 40px;\r\n    margin: 15px;\r\n    background-color: ${props => props.newGameBg};\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst GameButton = ({ onClickFunc, text, style }) => {\r\n    const context = useContext(ThemeContext);\r\n    const { isLightTheme, light, dark } = context;\r\n    const theme = isLightTheme ? light : dark;\r\n\r\n    return (\r\n        <StyledNewGameButton\r\n            style={style ? style : {}}\r\n            newGameBg={theme.newGameBg}\r\n            onClick={onClickFunc} >{text}</StyledNewGameButton>\r\n    )\r\n}\r\n\r\nexport default GameButton","import styled from 'styled-components'\r\n\r\n\r\nexport const StyledGameStatus = styled.div`\r\n    color: ${props => props.statusFont};\r\n    font-size: larger;\r\n    border: 1px solid gray;\r\n    border-radius: 10px;\r\n    padding: 15px 40px;\r\n    margin: 15px;\r\n    background-color: ${props => props.statusBg};\r\n\r\n\r\n`\r\n","import React, { useContext } from 'react'\r\nimport { StyledGameStatus } from './styledComponents/StyledGameStatus';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\n\r\nconst GameStatus = ({ text, value }) => {\r\n    const context = useContext(ThemeContext);\r\n    const { isLightTheme, light, dark } = context;\r\n    const theme = isLightTheme ? light : dark;\r\n\r\n    return (\r\n        <StyledGameStatus\r\n        statusFont={theme.statusFont}\r\n        statusBg={theme.statusBg} >\r\n            {text} {value}</StyledGameStatus>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GameStatus;","import styled from 'styled-components'\r\n\r\n\r\nexport const StyledTetris = styled.div`\r\n    box-sizing: border-box;\r\n    background: url(${props => props.bgImage});\r\n    height: 100vh;\r\n    overflow: auto;\r\n    background-repeat: repeat;\r\n`\r\n","export const boardHeight = 20; //rows\r\nexport const boardWidth = 10; //cols\r\n\r\nexport const createBoard = () => {\r\n\r\n    const fillingArr = new Array(boardWidth); //cols arr\r\n    fillingArr.fill([0, 'clear']);\r\n    //0 means an empty cell, not a tetromino \r\n    //clear means its not unified with the board and we should clear it in the next render, unified means its part of the board for now \r\n\r\n    const filledArr = new Array(boardHeight); //rows arr\r\n    filledArr.fill(fillingArr);\r\n\r\n    return (filledArr);\r\n}\r\n\r\nexport const outOfBounds = (currTetro, board, dirX, dirY = 0) => {\r\n    for (let y = 0; y < currTetro.tetromino.length; y++) {\r\n        for (let x = 0; x < currTetro.tetromino[0].length; x++) {\r\n            if (currTetro.tetromino[y][x] !== 0) { //checking each tetromino cell (with a tetromino, not 0) if its out of bounds \r\n\r\n                if (currTetro.position.y + dirY + y > boardHeight - 1 //checking the bottom border\r\n                    ||\r\n                    currTetro.position.x + dirX + x > boardWidth - 1 //checking the right border\r\n                    ||\r\n                    currTetro.position.x + dirX + x < 0 //checking the left border\r\n                    ||\r\n                    board[currTetro.position.y + dirY + y][currTetro.position.x + dirX + x][1] !== 'clear'\r\n                ) {\r\n                    \r\n                    return true; //out of bounds\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;// false means we can move, and we are not out of bounds\r\n}","import { useState, useEffect } from \"react\";\r\nimport { createBoard } from \"../gameEssentials\";\r\n\r\nexport const useBoard = (currTetro, newTetroOnBoard) => {\r\n    const [board, setBoard] = useState(createBoard());\r\n    const [clearedRowsCount, setClearedRowsCount] = useState(0);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [dropSpeed, setDropSpeed] = useState(1000);\r\n    const [level, setLevel] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n\r\n    const clearFullRows = (updatedBoard) => {\r\n        let totalRowscleared = 0;\r\n        for (let i = 0; i < updatedBoard.length; i++) {\r\n            let tetroCounter = 0;\r\n            for (let j = 0; j < updatedBoard[0].length; j++) {\r\n                if (updatedBoard[i][j][1] === 'unified') {\r\n                    tetroCounter++; //counts how many tetromino cells there are in a row \r\n                }\r\n            }\r\n            if (tetroCounter === updatedBoard[0].length) {// if there is a full row \r\n                totalRowscleared++;\r\n                setClearedRowsCount(prev => prev + 1);\r\n                for (let row = i; row > 0; row--) {\r\n                    for (let cell = 0; cell < updatedBoard[0].length; cell++) {\r\n                        updatedBoard[row][cell] = updatedBoard[row - 1][cell]; // updates each cell to be equal to the one above it\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        updateScore(totalRowscleared);\r\n    }\r\n\r\n    const updateScore = (totalRowscleared) => { //updates the score according to the num of rows cleared\r\n        if (totalRowscleared === 1) {\r\n            setScore(prev => prev + (40 * (level + 1)));\r\n        } else if (totalRowscleared === 2) {\r\n            setScore(prev => prev + (100 * (level + 1)));\r\n        } else if (totalRowscleared === 3) {\r\n            setScore(prev => prev + (300 * (level + 1)));\r\n        } else if (totalRowscleared >= 4) {\r\n            setScore(prev => prev + (1200 * (level + 1)));\r\n        }\r\n    }\r\n\r\n    const setLevelAndSpeed = (rows) => {\r\n        if (rows >= 50) {\r\n            setLevel(5);\r\n            setDropSpeed(150);\r\n        } else if (rows >= 40) {\r\n            setLevel(4);\r\n            setDropSpeed(250);\r\n        } else if (rows >= 30) {\r\n            setLevel(3);\r\n            setDropSpeed(400);\r\n        } else if (rows >= 20) {\r\n            setLevel(2);\r\n            setDropSpeed(550);\r\n        } else if (rows >= 10) {\r\n            setLevel(1);\r\n            setDropSpeed(700);\r\n        } else {\r\n            setLevel(0);\r\n            setDropSpeed(1000);\r\n        }\r\n    }\r\n\r\n    // making the updated board\r\n    const updateBoard = prevBoard => {\r\n        //checking each cell if unifiedWithBoard or clear\r\n        const updatedBoard = prevBoard.map(row => row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\r\n\r\n        //add the current tetromino to the board\r\n        currTetro.tetromino.map((row, indexRow) => row.map((cell, indexCol) => {\r\n            if (cell !== 0) { //if its a tetromino letter\r\n                if (updatedBoard[currTetro.position.y + indexRow][currTetro.position.x + indexCol][1] !== 'clear') {\r\n                    //if the new tetro is set on top of another tetro then game is over\r\n                    setDropSpeed(null);\r\n                    setGameOver(true);\r\n                }\r\n                updatedBoard[currTetro.position.y + indexRow][currTetro.position.x + indexCol] =\r\n                    [cell, `${currTetro.unifiedWithBoard ? 'unified' : 'clear'}`];\r\n            }\r\n        }));\r\n\r\n        if (currTetro.unifiedWithBoard) { //if the prev tetromino unified with the board, show a new tetromino and clear full rows\r\n            clearFullRows(updatedBoard);\r\n            if (currTetro.position.y === 0) {\r\n                //if the current tetro is at the top of the board then game is over \r\n                setGameOver(true);\r\n                setDropSpeed(null);\r\n            } else {\r\n                newTetroOnBoard();\r\n            }\r\n        }\r\n\r\n        return (updatedBoard);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setBoard(prevBoard => updateBoard(prevBoard))  //setting the board to the updated one\r\n    }, [currTetro])\r\n\r\n    useEffect(() => {\r\n        setLevelAndSpeed(clearedRowsCount)\r\n    }, [clearedRowsCount])\r\n\r\n    return [board, setBoard, clearedRowsCount, setClearedRowsCount, gameOver, setGameOver, dropSpeed, setDropSpeed, level, setLevelAndSpeed, score, setScore];\r\n\r\n}","import { useState } from \"react\";\r\nimport { getRandomTetromino, Tetrominos } from \"../tetrominos\";\r\nimport { boardWidth } from \"../gameEssentials\"\r\nimport { outOfBounds } from '../gameEssentials';\r\n\r\nexport const useTetro = () => {\r\n    const [currTetro, setCurrTetro] = useState({\r\n        position: { x: boardWidth / 2 - 2, y: 0 },\r\n        tetromino: Tetrominos[0].shape,\r\n        unifiedWithBoard: false\r\n    });\r\n\r\n    const updatePosition = (dirX, dirY, unifiedWithBoard = false) => {\r\n        //updates the current tetromino position\r\n        setCurrTetro(prevTetro => {\r\n            return ({\r\n                ...prevTetro,\r\n                position: { x: prevTetro.position.x + dirX, y: prevTetro.position.y + dirY },\r\n                unifiedWithBoard: unifiedWithBoard\r\n            })\r\n        })\r\n    }\r\n\r\n    const newTetroOnBoard = () => {\r\n        //sets a new tetromino on the board (relevant after the prev tetromino unified with the board)\r\n        const tetro = getRandomTetromino().shape\r\n        setCurrTetro({\r\n            position: { x: tetro.length > 3 ? boardWidth / 2 - 2 : boardWidth / 2 - 1, y: 0 },\r\n            tetromino: tetro,\r\n            unifiedWithBoard: false\r\n        })\r\n    }\r\n\r\n    const rotateTetro = (board) => {\r\n        const tetroToRotate = currTetro.tetromino.slice(); // a copy of the current tetromino\r\n        const rotatedTetro = [];\r\n\r\n        for (let i = 0; i < tetroToRotate.length; i++) { // making the new array the same size as the tetromino array\r\n            rotatedTetro[i] = tetroToRotate[i].slice();\r\n        }\r\n\r\n        for (let i = 0; i < tetroToRotate.length; i++) { // filling the new array to be the rotated tetromino array\r\n            for (let j = 0; j < tetroToRotate[0].length; j++) {\r\n                rotatedTetro[i][j] = tetroToRotate[tetroToRotate.length - 1 - j][i];\r\n            }\r\n        }\r\n\r\n        if (!outOfBounds({\r\n            position: currTetro.position,\r\n            tetromino: rotatedTetro,\r\n            unifiedWithBoard: currTetro.unifiedWithBoard\r\n        }, board, 0, 0)) { //update rotated tetromino if not out of bounds\r\n            setCurrTetro(prevTetro => {\r\n                return ({\r\n                    ...prevTetro,\r\n                    tetromino: rotatedTetro\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    return [currTetro, updatePosition, newTetroOnBoard, rotateTetro];\r\n\r\n}","import React, { useContext } from 'react';\r\n//components\r\nimport Board from './Board';\r\nimport GameButton from './GameButton';\r\nimport GameStatus from './GameStatus';\r\n//styled components\r\nimport { StyledTetris } from './styledComponents/StyledTetris';\r\n//hooks\r\nimport { useBoard } from '../hooks/useBoard';\r\nimport { useTetro } from '../hooks/useTetro';\r\nimport { useInterval } from '../hooks/useInterval';\r\n//others\r\nimport { createBoard, outOfBounds } from '../gameEssentials';\r\nimport {ThemeContext} from '../contexts/ThemeContext'\r\n\r\n\r\nconst Tetris = () => {\r\n\r\n  const [currTetro, updatePosition, newTetroOnBoard, rotateTetro] = useTetro();\r\n  const [board, setBoard, clearedRowsCount, setClearedRowsCount, gameOver, setGameOver, dropSpeed, setDropSpeed, level, setLevelAndSpeed, score, setScore] = useBoard(currTetro, newTetroOnBoard);\r\n\r\n  const context = useContext(ThemeContext);\r\n  const { isLightTheme, light, dark, toggleTheme } = context;\r\n  const theme = isLightTheme ? light : dark;\r\n\r\n  const newGame = () => {\r\n    setBoard(createBoard());\r\n    setGameOver(false);\r\n    newTetroOnBoard();\r\n    setClearedRowsCount(0);\r\n    setLevelAndSpeed(0);\r\n    setScore(0);\r\n  }\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      // Activate the interval again when user releases down arrow.\r\n      if (keyCode === 40) {\r\n        setLevelAndSpeed(clearedRowsCount);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  const moveTetromino = (e) => {\r\n    e.preventDefault();\r\n    if (!gameOver) {\r\n      if (e.keyCode === 37 && !outOfBounds(currTetro, board, -1)) { //moving left \r\n        updatePosition(-1, 0);\r\n      }\r\n      else if (e.keyCode === 38) { // up key - rotate tetromino\r\n        rotateTetro(board);\r\n      }\r\n      else if (e.keyCode === 39 && !outOfBounds(currTetro, board, 1)) { //moving right \r\n        updatePosition(1, 0);\r\n      }\r\n      else if (e.keyCode === 40) { //moving down \r\n        setDropSpeed(null);\r\n        moveDown();\r\n      }\r\n    }\r\n  }\r\n\r\n  const moveDown = () => {\r\n    if (!outOfBounds(currTetro, board, 0, 1)) {\r\n      updatePosition(0, 1);\r\n    } else {\r\n      updatePosition(0, 0, true);\r\n    }\r\n  }\r\n\r\n  useInterval(() => { // activating the moving down interval\r\n    moveDown();\r\n  }, dropSpeed)\r\n\r\n\r\n  return (\r\n    <StyledTetris \r\n      bgImage = {theme.bgImage}\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => moveTetromino(e)}\r\n      onKeyUp={keyUp}>\r\n\r\n      <h1 style={{ color: 'white', marginTop: '3vh', textAlign: 'center', textShadow: '4px 4px 19px rgba(150, 150, 152, 1)' }}>TETRIS</h1>\r\n      <div style={{position:'relative', width:'20vw', margin:'auto'}}> \r\n        <Board board={board} />\r\n        <div style={{ width: 'fit-content', position: 'absolute', top:'0', left:'-250px'}}>\r\n          <aside style={{ width: 'fit-content' }}>\r\n          {gameOver ? (<GameStatus text='Game Over' />) :\r\n              (<></>)\r\n            }\r\n          <div>\r\n                <GameStatus text='Score' value={score} />\r\n                <GameStatus text='Rows' value={clearedRowsCount} />\r\n                <GameStatus text='Level' value={level} />\r\n              </div>\r\n\r\n            <GameButton onClickFunc={newGame} text='New Game' />\r\n\r\n          </aside>\r\n        </div>\r\n        <GameButton style ={{position:'absolute', top:0, left:'22vw'}} onClickFunc={toggleTheme} text='change mode'/>\r\n\r\n      </div>\r\n\r\n    </StyledTetris>\r\n  );\r\n}\r\n\r\nexport default Tetris;","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}","import React from 'react';\nimport Tetris from './components/Tetris';\nimport ThemeContextProvider from \"./contexts/ThemeContext\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <ThemeContextProvider>\n        <Tetris />\n      </ThemeContextProvider>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}